/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TicketsRouteImport } from './routes/tickets'
import { Route as ModelSelectorRouteImport } from './routes/model-selector'
import { Route as KnowledgeBaseRouteImport } from './routes/knowledge-base'
import { Route as CustomersRouteImport } from './routes/customers'
import { Route as IndexRouteImport } from './routes/index'

const TicketsRoute = TicketsRouteImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => rootRouteImport,
} as any)
const ModelSelectorRoute = ModelSelectorRouteImport.update({
  id: '/model-selector',
  path: '/model-selector',
  getParentRoute: () => rootRouteImport,
} as any)
const KnowledgeBaseRoute = KnowledgeBaseRouteImport.update({
  id: '/knowledge-base',
  path: '/knowledge-base',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersRoute = CustomersRouteImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/customers': typeof CustomersRoute
  '/knowledge-base': typeof KnowledgeBaseRoute
  '/model-selector': typeof ModelSelectorRoute
  '/tickets': typeof TicketsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/customers': typeof CustomersRoute
  '/knowledge-base': typeof KnowledgeBaseRoute
  '/model-selector': typeof ModelSelectorRoute
  '/tickets': typeof TicketsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/customers': typeof CustomersRoute
  '/knowledge-base': typeof KnowledgeBaseRoute
  '/model-selector': typeof ModelSelectorRoute
  '/tickets': typeof TicketsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/customers'
    | '/knowledge-base'
    | '/model-selector'
    | '/tickets'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/customers' | '/knowledge-base' | '/model-selector' | '/tickets'
  id:
    | '__root__'
    | '/'
    | '/customers'
    | '/knowledge-base'
    | '/model-selector'
    | '/tickets'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomersRoute: typeof CustomersRoute
  KnowledgeBaseRoute: typeof KnowledgeBaseRoute
  ModelSelectorRoute: typeof ModelSelectorRoute
  TicketsRoute: typeof TicketsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers': {
      id: '/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/knowledge-base': {
      id: '/knowledge-base'
      path: '/knowledge-base'
      fullPath: '/knowledge-base'
      preLoaderRoute: typeof KnowledgeBaseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/model-selector': {
      id: '/model-selector'
      path: '/model-selector'
      fullPath: '/model-selector'
      preLoaderRoute: typeof ModelSelectorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tickets': {
      id: '/tickets'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/customers' {
  const createFileRoute: CreateFileRoute<
    '/customers',
    FileRoutesByPath['/customers']['parentRoute'],
    FileRoutesByPath['/customers']['id'],
    FileRoutesByPath['/customers']['path'],
    FileRoutesByPath['/customers']['fullPath']
  >
}
declare module './routes/knowledge-base' {
  const createFileRoute: CreateFileRoute<
    '/knowledge-base',
    FileRoutesByPath['/knowledge-base']['parentRoute'],
    FileRoutesByPath['/knowledge-base']['id'],
    FileRoutesByPath['/knowledge-base']['path'],
    FileRoutesByPath['/knowledge-base']['fullPath']
  >
}
declare module './routes/model-selector' {
  const createFileRoute: CreateFileRoute<
    '/model-selector',
    FileRoutesByPath['/model-selector']['parentRoute'],
    FileRoutesByPath['/model-selector']['id'],
    FileRoutesByPath['/model-selector']['path'],
    FileRoutesByPath['/model-selector']['fullPath']
  >
}
declare module './routes/tickets' {
  const createFileRoute: CreateFileRoute<
    '/tickets',
    FileRoutesByPath['/tickets']['parentRoute'],
    FileRoutesByPath['/tickets']['id'],
    FileRoutesByPath['/tickets']['path'],
    FileRoutesByPath['/tickets']['fullPath']
  >
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomersRoute: CustomersRoute,
  KnowledgeBaseRoute: KnowledgeBaseRoute,
  ModelSelectorRoute: ModelSelectorRoute,
  TicketsRoute: TicketsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
